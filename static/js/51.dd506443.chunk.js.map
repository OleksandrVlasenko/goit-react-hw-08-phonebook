{"version":3,"file":"static/js/51.dd506443.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ErrorMessage/ErrorMessageStyled.js","components/ErrorMessage/ErrorMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from \"@emotion/styled\"\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  \n\n  width: 300px;\n\n  padding: 20px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  border: 2px solid #05888d;\n\n  & input {\n    display: block;\n    width: 100%;\n  }\n\n  & button {\n    width: 100px;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 20px;\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoadingContacts = state => state.contacts.isLoadingContacts;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import React, { useEffect, useState } from 'react';\nimport shortid from 'shortid';\nimport Notiflix from 'notiflix';\n\nimport { ButtonContainer, Form } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst nameId = shortid.generate();\nconst numberId = shortid.generate();\n\nexport const ContactForm = ({ idEdit, setIdEdit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (idEdit) {\n      const indexOfCurrentId = contacts.findIndex(\n        contact => contact.id === idEdit\n      );\n      setName(contacts[indexOfCurrentId].name);\n      setNumber(contacts[indexOfCurrentId].number);\n    }\n  }, [idEdit, contacts]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleClick = () => {\n    setIdEdit(null);\n    formReset();\n  };\n\n  const equalContacts = () => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const buttonName = e.currentTarget.elements.button.textContent;\n\n    if (buttonName === 'Edit contact') {\n      dispatch(updateContact({ id: idEdit, name, number }));\n      setIdEdit(null);\n    } else {\n      if (equalContacts()) {\n        Notiflix.Notify.failure(`${name} already in contacts`);\n        return;\n      }\n\n      dispatch(addContact({ name, number }));\n    }\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nameId}\n          value={name}\n          required\n        />\n      </label>\n      <label htmlFor={numberId}>\n        Number\n        <input\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={numberId}\n          value={number}\n          required\n        />\n      </label>\n      <ButtonContainer>\n        <button type=\"submit\" name=\"button\">\n          {!idEdit ? 'Add contact' : 'Edit contact'}\n        </button>\n        {idEdit && (\n          <button type=\"button\" onClick={handleClick}>\n            Cancel\n          </button>\n        )}\n      </ButtonContainer>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 3px;\n`;\n\nexport const ContactName = styled.p`\n  font-weight: 700;\n  margin-right: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { ContactItem, ContactName } from './Contact.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoadingContacts } from 'redux/contacts/selectors';\nimport { IconButton } from '@mui/material';\n\nexport const Contact = ({ name, number, id, setIdEdit }) => {\n  // const [idOfDeletingContact, setIdOfDeletingContact] = useState(null);\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(selectIsLoadingContacts);\n\n  const handleDeleteContact = () => {\n    if (isLoadingContacts) {\n      return;\n    }\n    dispatch(deleteContact(id));\n    // setIdOfDeletingContact(id);\n  };\n\n  return (\n    <ContactItem>\n      <div>\n        <ContactName>{name}:</ContactName>\n        <p>{number}</p>\n      </div>\n      <div>\n        <IconButton\n          aria-label=\"edit\"\n          onClick={() => setIdEdit(id)}\n          sx={{ border: '2px solid transparent' }}\n        >\n          <EditIcon />\n        </IconButton>\n        <IconButton\n          aria-label=\"delete\"\n          onClick={handleDeleteContact}\n          sx={{ border: '2px solid transparent' }}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </div>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.div`\n  height: 450px;\n  overflow-y: scroll;\n\n  padding: 20px;\n  width: 400px;\n\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n  }\n`;\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n`;\n\n\n","import React from 'react';\nimport { Contact } from 'components/Contact/Contact';\n\nimport { Contacts, InfoMessage } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n  selectIsLoadingContacts,\n} from 'redux/contacts/selectors';\nimport { selectIsLoggedIn, selectIsRefreshing } from 'redux/auth/selectors';\n\nexport const ContactList = ({ setIdEdit }) => {\n  const isLoadingContacts = useSelector(selectIsLoadingContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <Contacts>\n      <ul>\n        {filteredContacts.map(({ id, name, number }) => (\n          <Contact\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            setIdEdit={setIdEdit}\n          />\n        ))}\n      </ul>\n\n      {isLoggedIn && contacts.length === 0 && !isRefreshing ? (\n        <InfoMessage>The list of contacts is empty</InfoMessage>\n      ) : (\n        filteredContacts.length === 0 &&\n        !isLoadingContacts && <InfoMessage>Nothing found</InfoMessage>\n      )}\n    </Contacts>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 20px;\n  width: 400px;\n`;\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n`;\n","import { Container, InfoMessage } from \"./ErrorMessageStyled\";\n\nexport const ErrorMessage = () => {\n  return (\n    <Container>\n      <InfoMessage>Something went wrong... Please reload the page</InfoMessage>\n    </Container>\n  ); \n};\n","import styled from '@emotion/styled';\n\nexport const FilterField = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 20px;\n  width: 400px;\n  margin-top: 10px;\n\n  /* & input {\n    width: 100%;\n  } */\n`;\n","import React from 'react';\nimport shortid from 'shortid';\n\nimport { FilterField } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst filterId = shortid.generate();\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(changeFilter(e.currentTarget.value));\n  };\n  return (\n    <FilterField>\n      <label htmlFor={filterId}>Find contacts by name</label>\n      <input\n        onChange={handleChange}\n        type=\"text\"\n        name=\"filter\"\n        id={filterId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        value={filter}\n      />\n    </FilterField>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 60px;\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\n// export const Container = styled.div`\n//   display: flex;\n//   width: 100%;\n//   /* gap: 50px; */\n//   justify-content: space-between;\n// `;\n\nexport const AddContactContainer = styled.div`\n  position: fixed;\n  top: 90px;\n  left: 180px;\n`;\n\nexport const ContactsContainer = styled.div`\n  position: fixed;\n  top: 90px;\n  right: 180px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect, useState } from 'react';\nimport {\n  AddContactContainer,\n  ContactsContainer,\n  Container,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  const [idEdit, setIdEdit] = useState(null);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <div>\n        <AddContactContainer>\n          <h2>{!idEdit ? 'Add new contact' : 'Edit contact'}</h2>\n          <ContactForm idEdit={idEdit} setIdEdit={setIdEdit} />\n        </AddContactContainer>\n        <ContactsContainer>\n          <h2>Contacts</h2>\n          <Filter />\n          {error ? <ErrorMessage /> : <ContactList setIdEdit={setIdEdit} />}\n        </ContactsContainer>\n      </div>\n    </Container>\n  );\n}\n"],"names":["Form","styled","ButtonContainer","selectContacts","state","contacts","items","selectIsLoadingContacts","isLoadingContacts","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","name","toLowerCase","includes","trim","nameId","shortid","numberId","ContactForm","idEdit","setIdEdit","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","useEffect","indexOfCurrentId","findIndex","contact","id","handleChange","e","currentTarget","value","formReset","onSubmit","preventDefault","elements","button","textContent","updateContact","find","Notiflix","addContact","htmlFor","onChange","type","pattern","title","required","onClick","ContactItem","ContactName","Contact","IconButton","sx","border","Edit","deleteContact","Delete","Contacts","InfoMessage","ContactList","filteredContacts","isRefreshing","selectIsRefreshing","isLoggedIn","selectIsLoggedIn","map","length","Container","ErrorMessage","FilterField","filterId","Filter","changeFilter","AddContactContainer","ContactsContainer","fetchContacts"],"sourceRoot":""}