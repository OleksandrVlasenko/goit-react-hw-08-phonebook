{"version":3,"file":"static/js/51.6da3d755.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ErrorMessage/ErrorMessageStyled.js","components/ErrorMessage/ErrorMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from \"@emotion/styled\"\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  \n\n  width: 300px;\n\n  padding: 20px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  border: 2px solid #05888d;\n\n  & input {\n    display: block;\n    width: 100%;\n  }\n\n  & button {\n    width: 100px;\n  }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoadingContacts = state => state.contacts.isLoadingContacts;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport Notiflix from 'notiflix';\n\nimport { Form } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst nameId = shortid.generate();\nconst numberId = shortid.generate();\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const equalContacts = () => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const addNewContact = (name, number) => {\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (equalContacts()) {\n      Notiflix.Notify.failure(`${name} already in contacts`);\n      return;\n    }\n\n    addNewContact(name, number);\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nameId}\n          value={name}\n          required\n        />\n      </label>\n      <label htmlFor={numberId}>\n        Number\n        <input\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={numberId}\n          value={number}\n          required\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 3px;\n`;\n\nexport const ContactName = styled.p`\n  font-weight: 700;\n  margin-right: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { ContactItem, ContactName } from './Contact.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectIsLoadingContacts } from 'redux/contacts/selectors';\nimport { IconButton } from '@mui/material';\n\nexport const Contact = ({ name, number, id }) => {\n  // const [idOfDeletingContact, setIdOfDeletingContact] = useState(null);\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(selectIsLoadingContacts);\n\n  const handleDeleteContact = () => {\n    if (isLoadingContacts) {\n      return;\n    }\n    dispatch(deleteContact(id));\n    // setIdOfDeletingContact(id);\n  };\n\n  return (\n    <ContactItem>\n      <div>\n        <ContactName>{name}:</ContactName>\n        <p>{number}</p>\n      </div>\n\n      <IconButton aria-label=\"delete\" onClick={handleDeleteContact} sx={{border: \"2px solid transparent\",}}>\n        <DeleteIcon />\n      </IconButton>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.div`\n  height: 450px;\n  overflow-y: scroll;\n\n  padding: 20px;\n  /* padding-left: 0; */\n  width: 400px;\n\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n  }\n`;\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n`;\n","import React from 'react';\nimport { Contact } from 'components/Contact/Contact';\n\nimport { Contacts, InfoMessage } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n  selectIsLoadingContacts,\n} from 'redux/contacts/selectors';\nimport { selectIsLoggedIn, selectIsRefreshing } from 'redux/auth/selectors';\n\nexport const ContactList = () => {\n  const isLoadingContacts = useSelector(selectIsLoadingContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  return (\n    <Contacts>\n      <ul>\n        {filteredContacts.map(({ id, name, number }) => (\n          <Contact key={id} id={id} name={name} number={number} />\n        ))}\n      </ul>\n\n      {isLoggedIn && contacts.length === 0 && !isRefreshing ? (\n        <InfoMessage>The list of contacts is empty</InfoMessage>\n      ) : (\n        filteredContacts.length === 0 &&\n        !isLoadingContacts && <InfoMessage>Nothing found</InfoMessage>\n      )}\n    </Contacts>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  padding: 20px;\n  width: 400px;\n`;\n\nexport const InfoMessage = styled.p`\n  font-weight: 700;\n`;\n","import { Container, InfoMessage } from \"./ErrorMessageStyled\";\n\nexport const ErrorMessage = () => {\n  return (\n    <Container>\n      <InfoMessage>Something went wrong... Please reload the page</InfoMessage>\n    </Container>\n  ); \n};\n","import styled from '@emotion/styled';\n\nexport const FilterField = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 20px;\n  width: 400px;\n  margin-top: 10px;\n\n  /* & input {\n    width: 100%;\n  } */\n`;\n","import React from 'react';\nimport shortid from 'shortid';\n\nimport { FilterField } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst filterId = shortid.generate();\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(changeFilter(e.currentTarget.value));\n  };\n  return (\n    <FilterField>\n      <label htmlFor={filterId}>Find contacts by name</label>\n      <input\n        onChange={handleChange}\n        type=\"text\"\n        name=\"filter\"\n        id={filterId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        value={filter}\n      />\n    </FilterField>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 60px;\n  padding-left: 20px;\n  padding-right: 20px;\n`;\n\n// export const Container = styled.div`\n//   display: flex;\n//   width: 100%;\n//   /* gap: 50px; */\n//   justify-content: space-between;\n// `;\n\nexport const AddContactContainer = styled.div`\n  position: fixed;\n  top: 90px;\n  left: 180px;\n`;\n\nexport const ContactsContainer = styled.div`\n  position: fixed;\n  top: 90px;\n  right: 180px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport {\n  AddContactContainer,\n  ContactsContainer,\n  Container,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n      <Container>\n        <h1>Phonebook</h1>\n        <div>\n          <AddContactContainer>\n            <h2>Add new contact</h2>\n            <ContactForm />\n          </AddContactContainer>\n          <ContactsContainer>\n            <h2>Contacts</h2>\n            <Filter />\n            {error ? <ErrorMessage /> : <ContactList />}\n          </ContactsContainer>\n        </div>\n      </Container>\n  );\n}\n"],"names":["Form","styled","selectContacts","state","contacts","items","selectIsLoadingContacts","isLoadingContacts","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","name","toLowerCase","includes","trim","nameId","shortid","numberId","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","formReset","onSubmit","preventDefault","find","contact","Notiflix","newContact","addContact","addNewContact","htmlFor","onChange","type","pattern","title","id","required","ContactItem","ContactName","Contact","IconButton","onClick","deleteContact","sx","border","Delete","Contacts","InfoMessage","ContactList","filteredContacts","isRefreshing","selectIsRefreshing","isLoggedIn","selectIsLoggedIn","map","length","Container","ErrorMessage","FilterField","filterId","Filter","changeFilter","AddContactContainer","ContactsContainer","useEffect","fetchContacts"],"sourceRoot":""}